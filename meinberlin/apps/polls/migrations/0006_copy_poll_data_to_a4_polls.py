# Generated by Django 2.2.24 on 2021-06-18 12:18

from django.db import migrations


def copy_data(apps, schema_editor):
    Item = apps.get_model('a4modules', 'Item')
    MBPoll = apps.get_model('meinberlin_polls', 'MBPoll')
    Poll = apps.get_model('a4polls', 'Poll')
    MBQuestion = apps.get_model('meinberlin_polls', 'MBQuestion')
    Question = apps.get_model('a4polls', 'Question')
    MBChoice = apps.get_model('meinberlin_polls', 'MBChoice')
    Choice = apps.get_model('a4polls', 'Choice')
    MBVote = apps.get_model('meinberlin_polls', 'MBVote')
    Vote = apps.get_model('a4polls', 'Vote')

    for mb_poll in MBPoll.objects.all():
        item = Item.objects.get(id=mb_poll.item_ptr_id)
        poll = Poll(item_ptr_id=mb_poll.item_ptr_id)
        poll.__dict__.update(item.__dict__)
        poll.save()
        mb_questions = MBQuestion.objects.filter(poll=mb_poll)
        for mb_question in mb_questions:
            question = Question.objects.create(
                label = mb_question.label,
                weight = mb_question.weight,
                multiple_choice = mb_question.multiple_choice,
                poll = poll)
            mb_choices = MBChoice.objects.filter(question=mb_question)
            for i, mb_choice in enumerate(mb_choices):
                choice = Choice.objects.create(
                    label = mb_choice.label,
                    question = question,
                    weight = i)
                mb_votes = MBVote.objects.filter(choice=mb_choice)
                for mb_vote in mb_votes:
                    Vote.objects.create(
                        created = mb_vote.created,
                        modified = mb_vote.modified,
                        creator = mb_vote.creator,
                        choice = choice)

    Comment = apps.get_model('a4comments', 'Comment')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    mb_poll_content_type = ContentType.objects.get_for_model(MBPoll)
    poll_content_type = ContentType.objects.get_for_model(Poll)
    comments = Comment.objects.filter(content_type_id=mb_poll_content_type.id)
    for comment in comments:
        comment.content_type = poll_content_type
        comment.save()

    Phase = apps.get_model('a4phases', 'Phase')
    phases = Phase.objects.filter(type='meinberlin_polls:voting')
    for phase in phases:
        phase.type='a4polls:voting'
        phase.save()


class Migration(migrations.Migration):

    dependencies = [
        ('meinberlin_polls', '0005_rename_mb_poll_models'),
        ('a4polls', '0001_initial'),
        ('a4comments', '0007_comment_is_moderator_marked'),
        ('a4phases', '0007_order_phases_also_by_id')
    ]

    operations = [
        migrations.RunPython(copy_data)
    ]
